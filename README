---------
my1imgpro
---------

Written by Azman M. Yusof (azman@my1matrix.net)

This is a simple image processing library (meant to support work on vision
@ video) that was written for personal use since 2006 (started as kimgpro).

This software consists of several small modules:
- my1image_base : basic my1image_t structure with management ops
- my1image_argb : basic rgb support for image file load/save functions
- my1image_gray : grayscale ops plus some basic functions (flip,turn,etc.)
- my1image_crgb : rgb color support
- my1image_chsv : hsv color support
- my1image_file : generic file load/save support (include my1image_file_fmt.h)
  = my1image_file_bmp : bmp support
  = my1image_file_pnm : pnm support
  = my1image_file_png : png support (load only)
- my1image_mask : basic convolution/correlation masks/kernels
- my1image_area : area/sub-image management
- my1image_buff : double buffer (triple actually...) with region
- my1image_util : filter support
- my1image_stat : grayscale histogram
- my1image_ifdb : library of commonly used filters
- my1image_task : generic task/event handler structure
- my1image_view : gtk-based gui canvas
- my1image_appw : gtk-based gui app for single image view
- my1image_hist : gtk-based gui window for histogram (requires appw)
- my1image_grab : generic image grabber module (easier to add new)
- my1image_main : template for simple image processing application
- my1image_data : sample 'work' data with histogram viewer
- my1libav_grab : libav wrapper to work with my1image_grab
* my1image_test : main test program for my1image & friends
- my1video_base : video structure based on my1image_t
- my1video_data : sample 'work' data for video processing flow
* my1video_test : main test program for my1video & friends

Work-in-progress:
- my1image_scan : raster scan meta-data used in my1image_mono
- my1image_mono : binary morphology procedures
- my1image_math : require my old lane detection code to test?

For simplicity, building an image processing software based on this library
can be done by just compiling in my1image.o (and including 'my1image.h').
Refer to my1image.c in order to find out the control flags on which module
to exclude/include (e.g. -D__MY1IMAGE_NO_HSV__ to exclude HSV support). The
my1video.c file is the my1image.c equivalent for video libary module.

The my1image_view/my1image_appw module requires gtk, while the my1video_main
module requires libav(ffmpeg).

Although my1imgpro library is meant for 8-bit grayscale processing, the
my1image_t structure can support color image using RGB-encoded integer
(assuming an integer is at least 32-bit).

See LICENSE for licensing details.

*Note*: The my1image_math module has no test codes... yet! I will put this in
when I have the time and idea :p

Supported file format
---------------------

By default, only 2 image file formats are supported (limited):
- BMP (gray & 24-bit RGB only)
- NetPBM@PNM Portable AnyMap (P1[bit|*.pbm]/P2[gray|*.pgm]/P3[pix|*.ppm] only)

An easy way to allow myimgpro uses an image is to use ImageMagick's convert:

- to get supported BMP, use 'convert image.file -compress none output.bmp'
- to get supported PNM, use 'convert image.file -compress none output.pnm'

A third format (PNG) is also supported (load only) but not included into
'library' by default because the code is slightly cumbersome and is not needed
for most applications. It can easily be inserted when needed (e.g. see
my1image_test.c and my1image_loader.c).

Sample application(s)
---------------------

Three sample applications: imgsize, imgload and hsvtest.

- imgsize: (imgsize.c) application to demonstrate image resizing
           functions of my1imgpro
- imgload: (imgload.c) loads and optionally save an image file into
           supported format AND C source code (targetting embedded application)
- hsvtest: (hsvtest.c) application to test HSV color representation

The code in chkimage.c is a simple application code to test my1image bundle.
